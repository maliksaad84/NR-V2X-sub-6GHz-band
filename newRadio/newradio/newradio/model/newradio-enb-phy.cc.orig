#include <ns3/object-factory.h>
#include <ns3/log.h>
#include <cfloat>
#include <cmath>
#include <ns3/simulator.h>
#include <ns3/attribute-accessor-helper.h>
#include <ns3/double.h>

#include "newradio-enb-phy.h"
#include "newradio-ue-phy.h"
#include "newradio-net-device.h"
#include "newradio-ue-net-device.h"
#include "newradio-spectrum-value-helper.h"
#include "newradio-radio-bearer-tag.h"
#include "mc-ue-net-device.h"

#include "newradio-beamforming.h"
#include "newradio-channel-matrix.h"
#include "newradio-channel-raytracing.h"

#include <ns3/node-list.h>
#include <ns3/node.h>
#include <ns3/pointer.h>

namespace ns3{

NS_LOG_COMPONENT_DEFINE ("newradioEnbPhy");

NS_OBJECT_ENSURE_REGISTERED (newradioEnbPhy);

newradioEnbPhy::newradioEnbPhy ()
{
	NS_LOG_FUNCTION (this);
	NS_FATAL_ERROR ("This constructor should not be called");
}

newradioEnbPhy::newradioEnbPhy (Ptr<newradioSpectrumPhy> dlPhy, Ptr<newradioSpectrumPhy> ulPhy)
    :newradioPhy (dlPhy, ulPhy),
	m_prevSlot (0),
  m_prevSlotDir (SlotAllocInfo::NA),
  m_currSymStart (0)
{
	m_enbCphySapProvider = new MemberLteEnbCphySapProvider<newradioEnbPhy> (this);
	m_roundFromLastUeSinrUpdate = 0;
	Simulator::ScheduleNow (&newradioEnbPhy::StartSubFrame, this);
}

newradioEnbPhy::~newradioEnbPhy ()
{

}

TypeId
newradioEnbPhy::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::newradioEnbPhy")
    .SetParent<newradioPhy> ()
    .AddConstructor<newradioEnbPhy> ()
	.AddAttribute ("TxPower",
	               "Transmission power in dBm",
	               DoubleValue (30.0),
	               MakeDoubleAccessor (&newradioEnbPhy::SetTxPower,
	                                   &newradioEnbPhy::GetTxPower),
	               MakeDoubleChecker<double> ())
	.AddAttribute ("UpdateSinrEstimatePeriod",
	               "Period (in ms) of update of SINR estimate of all the UE",
	               DoubleValue (10), //TODO considering refactoring in newradioPhyMacCommon
	               MakeDoubleAccessor (&newradioEnbPhy::m_updateSinrPeriod),
	               MakeDoubleChecker<double> ())
	.AddAttribute ("UpdateUeSinrEstimatePeriod",
	               "Period (in ms) of reporting of SINR estimate of all the UE",
	               DoubleValue (25.6),
	               MakeDoubleAccessor (&newradioEnbPhy::m_ueUpdateSinrPeriod),
	               MakeDoubleChecker<double> ())
	.AddAttribute ("NoiseFigure",
	               "Loss (dB) in the Signal-to-Noise-Ratio due to non-idealities in the receiver."
	               " According to Wikipedia (http://en.wikipedia.org/wiki/Noise_figure), this is "
	               "\"the difference in decibels (dB) between"
	               " the noise output of the actual receiver to the noise output of an "
	               " ideal receiver with the same overall gain and bandwidth when the receivers "
	               " are connected to sources at the standard noise temperature T0.\" "
	               "In this model, we consider T0 = 290K.",
	               DoubleValue (5.0),
	               MakeDoubleAccessor (&newradioPhy::SetNoiseFigure,
	                                   &newradioPhy::GetNoiseFigure),
	               MakeDoubleChecker<double> ())
	 .AddAttribute ("DlSpectrumPhy",
				    "The downlink newradioSpectrumPhy associated to this newradioPhy",
				    TypeId::ATTR_GET,
				    PointerValue (),
				    MakePointerAccessor (&newradioEnbPhy::GetDlSpectrumPhy),
				    MakePointerChecker <newradioSpectrumPhy> ())
	 .AddAttribute ("UlSpectrumPhy",
				    "The uplink newradioSpectrumPhy associated to this newradioPhy",
				    TypeId::ATTR_GET,
				    PointerValue (),
				    MakePointerAccessor (&newradioEnbPhy::GetUlSpectrumPhy),
				    MakePointerChecker <newradioSpectrumPhy> ())
	 .AddTraceSource ("UlSinrTrace",
					  "UL SINR statistics.",
					  MakeTraceSourceAccessor (&newradioEnbPhy::m_ulSinrTrace),
					  "ns3::UlSinr::TracedCallback")

	;
  return tid;

}

void
newradioEnbPhy::DoInitialize (void)
{
	NS_LOG_FUNCTION (this);
	Ptr<SpectrumValue> noisePsd = newradioSpectrumValueHelper::CreateNoisePowerSpectralDensity (m_phyMacConfig, m_noiseFigure);
	m_downlinkSpectrumPhy->SetNoisePowerSpectralDensity (noisePsd);
  //m_numRbg = m_phyMacConfig->GetNumRb() / m_phyMacConfig->GetNumRbPerRbg();
	//m_ctrlPeriod = NanoSeconds (1000 * m_phyMacConfig->GetCtrlSymbols() * m_phyMacConfig->GetSymbolPeriod());
	//m_dataPeriod = NanoSeconds (1000 * (m_phyMacConfig->GetSymbPerSlot() - m_phyMacConfig->GetCtrlSymbols()) * m_phyMacConfig->GetSymbolPeriod());

	for (unsigned i = 0; i < m_phyMacConfig->GetL1L2CtrlLatency(); i++)
	{ // push elements onto queue for initial scheduling delay
		m_controlMessageQueue.push_back (std::list<Ptr<newradioControlMessage> > ());
	}
	//m_sfAllocInfoUpdated = true;

	for (unsigned i = 0; i < m_phyMacConfig->GetTotalNumChunk(); i++)
	{
		m_channelChunks.push_back(i);
	}
	SetSubChannels(m_channelChunks);

	m_sfPeriod = NanoSeconds (1000.0 * m_phyMacConfig->GetSubframePeriod ());

	for (unsigned i = 0; i < m_phyMacConfig->GetSubframesPerFrame(); i++)
	{
		m_sfAllocInfo.push_back (SfAllocInfo(SfnSf (m_frameNum, i, 0)));
		SlotAllocInfo dlCtrlSlot;
		dlCtrlSlot.m_slotType = SlotAllocInfo::CTRL;
		dlCtrlSlot.m_numCtrlSym = 1;
		dlCtrlSlot.m_tddMode = SlotAllocInfo::DL_slotAllocInfo;
		dlCtrlSlot.m_dci.m_numSym = 1;
		dlCtrlSlot.m_dci.m_symStart = 0;
		SlotAllocInfo ulCtrlSlot;
		ulCtrlSlot.m_slotType = SlotAllocInfo::CTRL;
		ulCtrlSlot.m_numCtrlSym = 1;
		ulCtrlSlot.m_tddMode = SlotAllocInfo::UL_slotAllocInfo;
		ulCtrlSlot.m_slotIdx = 0xFF;
		ulCtrlSlot.m_dci.m_numSym = 1;
		ulCtrlSlot.m_dci.m_symStart = m_phyMacConfig->GetSymbolsPerSubframe()-1;
		m_sfAllocInfo[i].m_slotAllocInfo.push_back (dlCtrlSlot);
		m_sfAllocInfo[i].m_slotAllocInfo.push_back (ulCtrlSlot);
	}

	Simulator::Schedule(MilliSeconds(0), &newradioEnbPhy::UpdateUeSinrEstimate, this);
	newradioPhy::DoInitialize ();
}
void
newradioEnbPhy::DoDispose (void)
{

}

void
newradioEnbPhy::SetnewradioEnbCphySapUser (LteEnbCphySapUser* s)
{
  NS_LOG_FUNCTION (this);
  m_enbCphySapUser = s;
}

LteEnbCphySapProvider*
newradioEnbPhy::GetnewradioEnbCphySapProvider ()
{
  NS_LOG_FUNCTION (this);
  return m_enbCphySapProvider;
}

void
newradioEnbPhy::SetTxPower (double pow)
{
	m_txPower = pow;
}
double
newradioEnbPhy::GetTxPower () const
{
	return m_txPower;
}

void
newradioEnbPhy::SetNoiseFigure (double nf)
{
	m_noiseFigure = nf;
}
double
newradioEnbPhy::GetNoiseFigure () const
{
	return m_noiseFigure;
}

void
newradioEnbPhy::CalcChannelQualityForUe (std::vector <double> sinr, Ptr<newradioSpectrumPhy> ue)
{

}

Ptr<SpectrumValue>
newradioEnbPhy::CreateTxPowerSpectralDensity ()
{
	Ptr<SpectrumValue> psd =
			newradioSpectrumValueHelper::CreateTxPowerSpectralDensity (m_phyMacConfig, m_txPower, m_listOfSubchannels );
	return psd;
}

void
newradioEnbPhy::DoSetSubChannels ()
{

}

void
newradioEnbPhy::SetSubChannels (std::vector<int> mask )
{
	m_listOfSubchannels = mask;
	Ptr<SpectrumValue> txPsd = CreateTxPowerSpectralDensity ();
	NS_ASSERT (txPsd);
	m_downlinkSpectrumPhy->SetTxPowerSpectralDensity (txPsd);
}

Ptr<newradioSpectrumPhy>
newradioEnbPhy::GetDlSpectrumPhy () const
{
  return m_downlinkSpectrumPhy;
}

Ptr<newradioSpectrumPhy>
newradioEnbPhy::GetUlSpectrumPhy () const
{
  return m_uplinkSpectrumPhy;
}

void
newradioEnbPhy::UpdateUeSinrEstimate()
{
	// NS_LOG_UNCOND(this << " UpdateUeSinrEstimate for cell " << m_cellId << " at time " << Simulator::Now().GetMilliSeconds());
	m_sinrMap.clear();
	m_rxPsdMap.clear();
	Ptr<SpectrumValue> noisePsd = newradioSpectrumValueHelper::CreateNoisePowerSpectralDensity (m_phyMacConfig, m_noiseFigure);
	Ptr<SpectrumValue> totalReceivedPsd = Create <SpectrumValue> (SpectrumValue(noisePsd->GetSpectrumModel()));

	for(std::map<uint64_t, Ptr<NetDevice> >::iterator ue = m_ueAttachedImsiMap.begin(); ue != m_ueAttachedImsiMap.end(); ++ue)
	{
		// distinguish between MC and newradioNetDevice
		Ptr<newradioUeNetDevice> ueNetDevice = DynamicCast<newradioUeNetDevice> (ue->second);
		Ptr<McUeNetDevice> mcUeDev = DynamicCast<McUeNetDevice> (ue->second);
		Ptr<newradioUePhy> uePhy;
		// get tx power
		double ueTxPower = 0;
		if(ueNetDevice != 0) 
		{
			uePhy = ueNetDevice->GetPhy();
			ueTxPower = uePhy->GetTxPower();
		}
		else if (mcUeDev != 0) // it may be a MC device
		{
			
			uePhy = mcUeDev->GetnewradioPhy ();
			ueTxPower = uePhy->GetTxPower();	
		}
		else
		{
			NS_FATAL_ERROR("Unrecognized device");
		}
		NS_LOG_LOGIC("UE Tx power = " << ueTxPower);
	    double powerTxW = std::pow (10., (ueTxPower - 30) / 10);
	    double txPowerDensity = 0;
    	txPowerDensity = (powerTxW / (m_phyMacConfig->GetSystemBandwidth()));
	    NS_LOG_LOGIC("Linear UE Tx power = " << powerTxW);
	    NS_LOG_LOGIC("System bandwidth = " << m_phyMacConfig->GetSystemBandwidth());
	    NS_LOG_LOGIC("txPowerDensity = " << txPowerDensity);
		// create tx psd
		Ptr<SpectrumValue> txPsd =						// it is the eNB that dictates the conf, m_listOfSubchannels contains all the subch
			newradioSpectrumValueHelper::CreateTxPowerSpectralDensity (m_phyMacConfig, ueTxPower, m_listOfSubchannels);
		NS_LOG_LOGIC("TxPsd " << *txPsd);

		// get this node and remote node mobility
		Ptr<MobilityModel> enbMob = m_netDevice->GetNode()->GetObject<MobilityModel>(); 
		NS_LOG_LOGIC("eNB mobility " << enbMob->GetPosition());
		Ptr<MobilityModel> ueMob = ue->second->GetNode()->GetObject<MobilityModel>();
		NS_LOG_LOGIC("UE mobility " << ueMob->GetPosition());
		
		// compute rx psd

		// adjuts beamforming of antenna model wrt user
		Ptr<AntennaArrayModel> rxAntennaArray = DynamicCast<AntennaArrayModel> (GetDlSpectrumPhy ()->GetRxAntenna());
		rxAntennaArray->ChangeBeamformingVector (ue->second);									// TODO check if this is the correct antenna
		Ptr<AntennaArrayModel> txAntennaArray = DynamicCast<AntennaArrayModel> (uePhy->GetDlSpectrumPhy ()->GetRxAntenna());
																						// Dl, since the Ul is not actually used (TDD device)
		txAntennaArray->ChangeBeamformingVector (m_netDevice);									// TODO check if this is the correct antenna
		
		double pathLossDb = 0;
		if (txAntennaArray != 0)
		{
		  Angles txAngles (enbMob->GetPosition (), ueMob->GetPosition ());
		  double txAntennaGain = txAntennaArray->GetGainDb (txAngles);
		  NS_LOG_LOGIC ("txAntennaGain = " << txAntennaGain << " dB");
		  pathLossDb -= txAntennaGain;
		}
		if (rxAntennaArray != 0)
		{
		  Angles rxAngles (ueMob->GetPosition (), enbMob->GetPosition ());
		  double rxAntennaGain = rxAntennaArray->GetGainDb (rxAngles);
		  NS_LOG_LOGIC ("rxAntennaGain = " << rxAntennaGain << " dB");
		  pathLossDb -= rxAntennaGain;
		}
		if (m_propagationLoss)
		{
		  double propagationGainDb = m_propagationLoss->CalcRxPower (0, ueMob, enbMob);
		  NS_LOG_LOGIC ("propagationGainDb = " << propagationGainDb << " dB");
		  pathLossDb -= propagationGainDb;
		}                    
		//NS_LOG_UNCOND ("total pathLoss = " << pathLossDb << " dB");    

		double pathGainLinear = std::pow (10.0, (-pathLossDb) / 10.0);
		Ptr<SpectrumValue> rxPsd = txPsd->Copy();
		*(rxPsd) *= pathGainLinear;              

		Ptr<newradioBeamforming> beamforming = DynamicCast<newradioBeamforming> (m_spectrumPropagationLossModel);
		//beamforming->SetBeamformingVector(ue->second, m_netDevice);
		Ptr<newradioChannelMatrix> channelMatrix = DynamicCast<newradioChannelMatrix> (m_spectrumPropagationLossModel);
		Ptr<newradioChannelRaytracing> rayTracing = DynamicCast<newradioChannelRaytracing> (m_spectrumPropagationLossModel);
		if (beamforming != 0)
		{
			rxPsd = beamforming->CalcRxPowerSpectralDensity(rxPsd, ueMob, enbMob);
			NS_LOG_LOGIC("RxPsd " << *rxPsd);
		}
		else if (channelMatrix != 0)
		{
			rxPsd = channelMatrix->CalcRxPowerSpectralDensity(rxPsd, ueMob, enbMob);
			NS_LOG_LOGIC("RxPsd " << *rxPsd);
		}
		else if (rayTracing != 0)
		{
			rxPsd = rayTracing->CalcRxPowerSpectralDensity(rxPsd, ueMob, enbMob);
			NS_LOG_LOGIC("RxPsd " << *rxPsd);
		}
		m_rxPsdMap[ue->first] = rxPsd;
		*totalReceivedPsd += *rxPsd;

		// set back the bf vector to the main eNB
		if(ueNetDevice != 0) 
		{														// target not set yet
			if((ueNetDevice->GetTargetEnb() != m_netDevice) && (ueNetDevice->GetTargetEnb() != 0))
			{
				txAntennaArray->ChangeBeamformingVector(ueNetDevice->GetTargetEnb());
			}
		}
		else if (mcUeDev != 0) // it may be a MC device
		{															// target not set yet
			if((mcUeDev->GetnewradioTargetEnb() != m_netDevice) && (mcUeDev->GetnewradioTargetEnb() != 0))
			{
				txAntennaArray->ChangeBeamformingVector(mcUeDev->GetnewradioTargetEnb());
			}	
		}
		else
		{
			NS_FATAL_ERROR("Unrecognized device");
		}

	}

	for(std::map<uint64_t, Ptr<SpectrumValue> >::iterator ue = m_rxPsdMap.begin(); ue != m_rxPsdMap.end(); ++ue)
	{
		SpectrumValue interference = *totalReceivedPsd - *(ue->second);
		NS_LOG_LOGIC("interference " << interference);
		SpectrumValue sinr = *(ue->second)/(*noisePsd + interference);
		NS_LOG_LOGIC("sinr " << sinr);
		double sinrAvg = Sum(sinr)/(sinr.GetSpectrumModel()->GetNumBands()); 
		m_sinrMap[ue->first] = sinrAvg;
		//NS_LOG_UNCOND("Time " << Simulator::Now().GetSeconds() << " CellId " << m_cellId << " UE " << ue->first << "Average SINR " << 10*std::log10(sinrAvg));
	}

	if(m_roundFromLastUeSinrUpdate >= (m_ueUpdateSinrPeriod/m_updateSinrPeriod))
	{
		m_roundFromLastUeSinrUpdate = 0;
		for(std::map<uint64_t, Ptr<NetDevice> >::iterator ue = m_ueAttachedImsiMap.begin(); ue != m_ueAttachedImsiMap.end(); ++ue)
		{
			// distinguish between MC and newradioNetDevice
			Ptr<newradioUeNetDevice> ueNetDevice = DynamicCast<newradioUeNetDevice> (ue->second);
			Ptr<McUeNetDevice> mcUeDev = DynamicCast<McUeNetDevice> (ue->second);
			Ptr<newradioUePhy> uePhy;
			if(ueNetDevice != 0) 
			{
				uePhy = ueNetDevice->GetPhy();
			}
			else if (mcUeDev != 0) // it may be a MC device
			{
				uePhy = mcUeDev->GetnewradioPhy ();
			}
			uePhy->UpdateSinrEstimate(m_cellId, m_sinrMap.find(ue->first)->second);
		}
	}
	else
	{
		m_roundFromLastUeSinrUpdate++;
	}

	

	LteEnbCphySapUser::UeAssociatedSinrInfo info;
	info.ueImsiSinrMap = m_sinrMap;
	m_enbCphySapUser->UpdateUeSinrEstimate(info);
	Simulator::Schedule(MilliSeconds(m_updateSinrPeriod), &newradioEnbPhy::UpdateUeSinrEstimate, this);

}

void
newradioEnbPhy::StartSubFrame (void)
{
	NS_LOG_FUNCTION (this);

	m_lastSfStart = Simulator::Now();

	m_currSfAllocInfo = m_sfAllocInfo[m_sfNum];
	//m_currSfNumSlots = m_currSfAllocInfo.m_dlSlotAllocInfo.size () + m_currSfAllocInfo.m_ulSlotAllocInfo.size ();
	m_currSfNumSlots = m_currSfAllocInfo.m_slotAllocInfo.size ();

	NS_ASSERT ((m_currSfAllocInfo.m_sfnSf.m_frameNum == m_frameNum) &&
	           (m_currSfAllocInfo.m_sfnSf.m_sfNum == m_sfNum));

	if (m_sfNum == 0) 		// send MIB at the beginning of each frame
	{
		LteRrcSap::MasterInformationBlock mib;
		mib.dlBandwidth = (uint8_t)4;
		mib.systemFrameNumber = 1;
		Ptr<newradioMibMessage> mibMsg = Create<newradioMibMessage> ();
		mibMsg->SetMib(mib);
		if (m_controlMessageQueue.empty())
		{
			std::list<Ptr<newradioControlMessage> > l;
			m_controlMessageQueue.push_back (l);
		}
		m_controlMessageQueue.at (0).push_back (mibMsg);
	}
	else if (m_sfNum == 5)  // send SIB at beginning of second half-frame
	{
		Ptr<newradioSib1Message> msg = Create<newradioSib1Message> ();
		msg->SetSib1 (m_sib1);
		m_controlMessageQueue.at (0).push_back (msg);
	}

	StartSlot();
}

void
newradioEnbPhy::StartSlot (void)
{
	//assume the control signal is omi
	Ptr<AntennaArrayModel> antennaArray = DynamicCast<AntennaArrayModel> (GetDlSpectrumPhy ()->GetRxAntenna());
	antennaArray->ChangeToOmniTx ();

	NS_LOG_FUNCTION (this);

	SlotAllocInfo currSlot;

	/*uint8_t slotInd = 0;
	if (m_slotNum >= m_currSfAllocInfo.m_dlSlotAllocInfo.size ())
	{
		if (m_currSfAllocInfo.m_ulSlotAllocInfo.size () > 0)
		{
			slotInd = m_slotNum - m_currSfAllocInfo.m_dlSlotAllocInfo.size ();
			currSlot = m_currSfAllocInfo.m_ulSlotAllocInfo[slotInd];
			m_currSymStart = currSlot.m_dci.m_symStart;
		}
	}
	else
	{
		if (m_currSfAllocInfo.m_ulSlotAllocInfo.size () > 0)
		{
			slotInd = m_slotNum;
			currSlot = m_currSfAllocInfo.m_dlSlotAllocInfo[slotInd];
			m_currSymStart = currSlot.m_dci.m_symStart;
		}
	}*/

	//slotInd = m_slotNum;
	currSlot = m_currSfAllocInfo.m_slotAllocInfo[m_slotNum];
	m_currSymStart = currSlot.m_dci.m_symStart;

	SfnSf sfn = SfnSf (m_frameNum, m_sfNum, m_slotNum);
  m_harqPhyModule->SubframeIndication (sfn);  // trigger HARQ module

  std::list <Ptr<newradioControlMessage > > dciMsgList;

	Time guardPeriod;
	Time slotPeriod;

	if(m_slotNum == 0) // DL control slot
	{
		// get control messages to be transmitted in DL-Control period
		std::list <Ptr<newradioControlMessage > > ctrlMsgs = GetControlMessages ();
		//std::list <Ptr<newradioControlMessage > >::iterator it = ctrlMsgs.begin ();
		// find all DL/UL DCI elements and create DCI messages to be transmitted in DL control period
		for (unsigned islot = 0; islot < m_currSfAllocInfo.m_slotAllocInfo.size (); islot++)
		{
			if (m_currSfAllocInfo.m_slotAllocInfo[islot].m_slotType != SlotAllocInfo::CTRL &&
					m_currSfAllocInfo.m_slotAllocInfo[islot].m_tddMode == SlotAllocInfo::DL_slotAllocInfo)
			{
				DciInfoElementTdma &dciElem = m_currSfAllocInfo.m_slotAllocInfo[islot].m_dci;
				NS_ASSERT (dciElem.m_format == DciInfoElementTdma::DL_dci);
				if (dciElem.m_tbSize > 0)
				{
					Ptr<newradioTdmaDciMessage> dciMsg = Create<newradioTdmaDciMessage> ();
					dciMsg->SetDciInfoElement (dciElem);
					dciMsg->SetSfnSf (sfn);
					dciMsgList.push_back (dciMsg);
					ctrlMsgs.push_back (dciMsg);
				}
			}
		}

		unsigned ulSfNum = (m_sfNum + m_phyMacConfig->GetUlSchedDelay ()) % m_phyMacConfig->GetSubframesPerFrame ();
		for (unsigned islot = 0; islot < m_sfAllocInfo[ulSfNum].m_slotAllocInfo.size (); islot++)
		{
			if (m_sfAllocInfo[ulSfNum].m_slotAllocInfo[islot].m_slotType != SlotAllocInfo::CTRL
					&& m_sfAllocInfo[ulSfNum].m_slotAllocInfo[islot].m_tddMode == SlotAllocInfo::UL_slotAllocInfo)
			{
				DciInfoElementTdma &dciElem = m_sfAllocInfo[ulSfNum].m_slotAllocInfo[islot].m_dci;
				NS_ASSERT (dciElem.m_format == DciInfoElementTdma::UL_dci);
				if (dciElem.m_tbSize > 0)
				{
					Ptr<newradioTdmaDciMessage> dciMsg = Create<newradioTdmaDciMessage> ();
					dciMsg->SetDciInfoElement (dciElem);
					dciMsg->SetSfnSf (sfn);
					//dciMsgList.push_back (dciMsg);
					ctrlMsgs.push_back (dciMsg);
				}
			}
		}

		// TX control period
		slotPeriod = NanoSeconds (1000.0*m_phyMacConfig->GetSymbolPeriod ()*m_phyMacConfig->GetDlCtrlSymbols());
		NS_LOG_DEBUG ("ENB " << m_cellId << " TXing DL CTRL frame " << m_frameNum << " subframe " << (unsigned)m_sfNum << " symbols "
		              << (unsigned)currSlot.m_dci.m_symStart << "-" << (unsigned)(currSlot.m_dci.m_symStart+currSlot.m_dci.m_numSym-1)
		              << "\t start " << Simulator::Now() << " end " << Simulator::Now() + slotPeriod-NanoSeconds(1.0));
		SendCtrlChannels(ctrlMsgs, slotPeriod-NanoSeconds(1.0)); // -1 ns ensures control ends before data period
	}
	else if (m_slotNum == m_currSfNumSlots-1) // UL control slot
	{
		slotPeriod = NanoSeconds (1000.0*m_phyMacConfig->GetSymbolPeriod ()*m_phyMacConfig->GetUlCtrlSymbols());
		NS_LOG_DEBUG ("ENB " << m_cellId << " RXing UL CTRL frame " << m_frameNum << " subframe " << (unsigned)m_sfNum << " symbols "
		              << (unsigned)currSlot.m_dci.m_symStart << "-" << (unsigned)(currSlot.m_dci.m_symStart+currSlot.m_dci.m_numSym-1)
							    << "\t start " << Simulator::Now() << " end " << Simulator::Now() + slotPeriod);
	}
	else if (currSlot.m_tddMode == SlotAllocInfo::DL_slotAllocInfo) 	  // transmit DL slot
	{
		slotPeriod = NanoSeconds (1000.0 * m_phyMacConfig->GetSymbolPeriod() * currSlot.m_dci.m_numSym);
		NS_ASSERT (currSlot.m_tddMode == SlotAllocInfo::DL_slotAllocInfo);
		//NS_LOG_DEBUG ("Slot " << m_slotNum << " scheduled for Downlink");
		//			if (m_prevSlotDir == SlotAllocInfo::UL_slotAllocInfo)  // if curr slot == DL and prev slot == UL
		//			{
		//				guardPeriod = NanoSeconds (1000.0 * m_phyMacConfig->GetGuardPeriod ());
		//			}
		Ptr<PacketBurst> pktBurst = GetPacketBurst (SfnSf (m_frameNum, m_sfNum, currSlot.m_dci.m_symStart));
		if(pktBurst && pktBurst->GetNPackets() > 0)
		{
			std::list< Ptr<Packet> > pkts = pktBurst->GetPackets ();
			newradioMacPduTag macTag;
			pkts.front ()->PeekPacketTag (macTag);
			NS_ASSERT ((macTag.GetSfn().m_sfNum == m_sfNum) && (macTag.GetSfn().m_slotNum == currSlot.m_dci.m_symStart));
		}
		else
		{
			// sometimes the UE will be scheduled when no data is queued
			// in this case, send an empty PDU
			newradioMacPduTag tag (SfnSf(m_frameNum, m_sfNum, currSlot.m_dci.m_symStart));
			Ptr<Packet> emptyPdu = Create <Packet> ();
			newradioMacPduHeader header;
			MacSubheader subheader (3, 0);  // lcid = 3, size = 0
			header.AddSubheader (subheader);
			emptyPdu->AddHeader (header);
			emptyPdu->AddPacketTag (tag);
			LteRadioBearerTag bearerTag (currSlot.m_dci.m_rnti, 3, 0);
			emptyPdu->AddPacketTag (bearerTag);
			pktBurst = CreateObject<PacketBurst> ();
			pktBurst->AddPacket (emptyPdu);
		}
		NS_LOG_DEBUG ("ENB " << m_cellId << " TXing DL DATA frame " << m_frameNum << " subframe " << (unsigned)m_sfNum << " symbols "
		              << (unsigned)currSlot.m_dci.m_symStart << "-" << (unsigned)(currSlot.m_dci.m_symStart+currSlot.m_dci.m_numSym-1)
		              << "\t start " << Simulator::Now()+NanoSeconds(1.0) << " end " << Simulator::Now() + slotPeriod-NanoSeconds (2.0));
		Simulator::Schedule (NanoSeconds(1.0), &newradioEnbPhy::SendDataChannels, this, pktBurst, slotPeriod-NanoSeconds (2.0), currSlot);
	}
	else if (currSlot.m_tddMode == SlotAllocInfo::UL_slotAllocInfo)  // receive UL slot
	{
		slotPeriod = NanoSeconds (1000.0 * m_phyMacConfig->GetSymbolPeriod() * currSlot.m_dci.m_numSym);
		//NS_LOG_DEBUG ("Slot " << (uint8_t)m_slotNum << " scheduled for Uplink");
		m_downlinkSpectrumPhy->AddExpectedTb(currSlot.m_dci.m_rnti, currSlot.m_dci.m_ndi, currSlot.m_dci.m_tbSize,
		                                     currSlot.m_dci.m_mcs, m_channelChunks, currSlot.m_dci.m_harqProcess, currSlot.m_dci.m_rv, false,
		                                     currSlot.m_dci.m_symStart, currSlot.m_dci.m_numSym);

		for (uint8_t i = 0; i < m_deviceMap.size (); i++)
		{
			Ptr<newradioUeNetDevice> ueDev = DynamicCast<newradioUeNetDevice> (m_deviceMap.at (i));
			Ptr<McUeNetDevice> mcUeDev = DynamicCast<McUeNetDevice> (m_deviceMap.at (i));
			uint64_t ueRnti = (ueDev != 0) ? (ueDev->GetPhy ()->GetRnti ()) : (mcUeDev->GetnewradioPhy()->GetRnti ());
			//NS_LOG_UNCOND ("Scheduled rnti:"<<rnti <<" ue rnti:"<< ueRnti);
			if (currSlot.m_rnti == ueRnti)
			{
				//NS_LOG_UNCOND ("Change Beamforming Vector");
				Ptr<AntennaArrayModel> antennaArray = DynamicCast<AntennaArrayModel> (GetDlSpectrumPhy ()->GetRxAntenna());
				antennaArray->ChangeBeamformingVector (m_deviceMap.at (i));
				break;
			}
		}

		NS_LOG_DEBUG ("ENB " << m_cellId << " RXing UL DATA frame " << m_frameNum << " subframe " << (unsigned)m_sfNum << " symbols "
		              << (unsigned)currSlot.m_dci.m_symStart << "-" << (unsigned)(currSlot.m_dci.m_symStart+currSlot.m_dci.m_numSym-1)
		              << "\t start " << Simulator::Now() << " end " << Simulator::Now() + slotPeriod );
	}

  m_prevSlotDir = currSlot.m_tddMode;

	m_phySapUser->SubframeIndication (SfnSf (m_frameNum, m_sfNum, m_slotNum));  // trigger MAC

	Simulator::Schedule (slotPeriod, &newradioEnbPhy::EndSlot, this);
}

void
newradioEnbPhy::EndSlot (void)
{
	NS_LOG_FUNCTION (this << Simulator::Now ().GetSeconds ());

	Ptr<AntennaArrayModel> antennaArray = DynamicCast<AntennaArrayModel> (GetDlSpectrumPhy ()->GetRxAntenna());
	antennaArray->ChangeToOmniTx ();

	if (m_slotNum == m_currSfNumSlots-1)
	{
		m_slotNum = 0;
		EndSubFrame ();
	}
	else
	{
		Time nextSlotStart;
		//uint8_t slotInd = m_slotNum+1;
		/*if (slotInd >= m_currSfAllocInfo.m_slotAllocInfo.size ())
		{
			if (m_currSfAllocInfo.m_slotAllocInfo.size () > 0)
			{
				slotInd = slotInd - m_currSfAllocInfo.m_slotAllocInfo.size ();
				nextSlotStart = NanoSeconds (1000.0 * m_phyMacConfig->GetSymbolPeriod () *
				                             m_currSfAllocInfo.m_ulSlotAllocInfo[slotInd].m_dci.m_symStart);
			}
		}
		else
		{
			if (m_currSfAllocInfo.m_slotAllocInfo.size () > 0)
			{
				nextSlotStart = NanoSeconds (1000.0 * m_phyMacConfig->GetSymbolPeriod () *
				                             m_currSfAllocInfo.m_slotAllocInfo[slotInd].m_dci.m_symStart);
			}
		}*/
		m_slotNum++;
		nextSlotStart = NanoSeconds (1000.0 * m_phyMacConfig->GetSymbolPeriod () *
						                             m_currSfAllocInfo.m_slotAllocInfo[m_slotNum].m_dci.m_symStart);
		Simulator::Schedule (nextSlotStart+m_lastSfStart-Simulator::Now(), &newradioEnbPhy::StartSlot, this);
	}
}

void
newradioEnbPhy::EndSubFrame (void)
{
	NS_LOG_FUNCTION (this << Simulator::Now ().GetSeconds ());

	Time sfStart = m_lastSfStart + m_sfPeriod - Simulator::Now();
	m_slotNum = 0;
	if (m_sfNum == m_phyMacConfig->GetSubframesPerFrame ()-1)
	{
		m_sfNum = 0;
//		if (m_frameNum == 1023)
//		{
//			m_frameNum = 0;
//		}
//		else
//		{
//			m_frameNum++;
//		}
		m_frameNum++;
	}
	else
	{
		m_sfNum++;
	}

	Simulator::Schedule (sfStart, &newradioEnbPhy::StartSubFrame, this);
}

void
newradioEnbPhy::SendDataChannels (Ptr<PacketBurst> pb, Time slotPrd, SlotAllocInfo& slotInfo)
{
	if (slotInfo.m_isOmni)
	{
		Ptr<AntennaArrayModel> antennaArray = DynamicCast<AntennaArrayModel> (GetDlSpectrumPhy ()->GetRxAntenna());
		antennaArray->ChangeToOmniTx ();
	}
	else
	{ // update beamforming vectors (currently supports 1 user only)
		//std::map<uint16_t, std::vector<unsigned> >::iterator ueRbIt = slotInfo.m_ueRbMap.begin();
		//uint16_t rnti = ueRbIt->first;
		for (uint8_t i = 0; i < m_deviceMap.size (); i++)
		{
			uint64_t ueRnti = 0;
			Ptr<newradioUeNetDevice> ueDev = m_deviceMap.at(i)->GetObject<newradioUeNetDevice> ();
			if (ueDev != 0) 
			{
				ueRnti = ueDev->GetPhy ()-> GetRnti ();
			}
			else
			{
				Ptr<McUeNetDevice> ueMcDev = m_deviceMap.at(i)->GetObject<McUeNetDevice> ();
				ueRnti = ueMcDev->GetnewradioPhy () -> GetRnti ();
			} 

			//NS_LOG_UNCOND ("Scheduled rnti:"<<rnti <<" ue rnti:"<< ueRnti);
			if (slotInfo.m_dci.m_rnti == ueRnti)
			{
				//NS_LOG_UNCOND ("Change Beamforming Vector");
				Ptr<AntennaArrayModel> antennaArray = DynamicCast<AntennaArrayModel> (GetDlSpectrumPhy ()->GetRxAntenna());
				antennaArray->ChangeBeamformingVector (m_deviceMap.at (i));
				break;
			}

		}
	}

	/*
	if (!slotInfo.m_isOmni && !slotInfo.m_ueRbMap.empty ())
	{
		Ptr<AntennaArrayModel> antennaArray = DynamicCast<AntennaArrayModel> (GetDlSpectrumPhy ()->GetRxAntenna());
		 //set beamforming vector;
		 //for ENB, you can choose 64 antenna with 0-15 sectors, or 4 antenna with 0-3 sectors;
		 //input is (sector, antenna number)
		antennaArray->SetSector (0,64);
	}
	*/

	std::list<Ptr<newradioControlMessage> > ctrlMsgs;
	m_downlinkSpectrumPhy->StartTxDataFrames(pb, ctrlMsgs, slotPrd, slotInfo.m_slotIdx);
}

void
newradioEnbPhy::SendCtrlChannels(std::list<Ptr<newradioControlMessage> > ctrlMsgs, Time slotPrd)
{
	/* Send Ctrl messages*/
	NS_LOG_FUNCTION (this<<"Send Ctrl");
	m_downlinkSpectrumPhy->StartTxDlControlFrames (ctrlMsgs, slotPrd);
}

bool
newradioEnbPhy::AddUePhy (uint64_t imsi, Ptr<NetDevice> ueDevice)
{
	NS_LOG_FUNCTION (this<<imsi);
	std::set <uint64_t>::iterator it;
	it = m_ueAttached.find(imsi);

	if (it == m_ueAttached.end ())
	{
		m_ueAttached.insert(imsi);
		m_deviceMap.push_back(ueDevice);
		m_ueAttachedImsiMap[imsi] = ueDevice;
		return (true);
	}
	else
	{
		NS_LOG_ERROR ("Programming error...UE already attached");
		return (false);
	}
}

void
newradioEnbPhy::PhyDataPacketReceived (Ptr<Packet> p)
{
	Simulator::ScheduleWithContext (m_netDevice->GetNode()->GetId(),
	                                MicroSeconds(m_phyMacConfig->GetTbDecodeLatency()),
	                                &newradioEnbPhySapUser::ReceivePhyPdu,
	                                m_phySapUser,
	                                p);
//		m_phySapUser->ReceivePhyPdu(p);
}

void
newradioEnbPhy::GenerateDataCqiReport (const SpectrumValue& sinr)
{
  NS_LOG_LOGIC ("Sinr from DataCqiReport = " << sinr);
  double sinrAvg = Sum(sinr)/(sinr.GetSpectrumModel()->GetNumBands()); 
  NS_LOG_INFO ("Average SINR on DataCqiReport " << 10*std::log10(sinrAvg));

  Values::const_iterator it;
  newradioMacSchedSapProvider::SchedUlCqiInfoReqParameters ulcqi;
  ulcqi.m_ulCqi.m_type = UlCqiInfo::PUSCH;
  int i = 0;
  for (it = sinr.ConstValuesBegin (); it != sinr.ConstValuesEnd (); it++)
  {
//  	double sinrdb = 10 * std::log10 ((*it));
  	//       NS_LOG_DEBUG ("ULCQI RB " << i << " value " << sinrdb);
  	// convert from double to fixed point notaltion Sxxxxxxxxxxx.xxx
//  	int16_t sinrFp = LteFfConverter::double2fpS11dot3 (sinrdb);
  	ulcqi.m_ulCqi.m_sinr.push_back (*it);
  	i++;
  }

  // here we use the start symbol index of the slot in place of the slot index because the absolute UL slot index is
  // not known to the scheduler when m_allocationMap gets populated
  ulcqi.m_sfnSf = SfnSf (m_frameNum, m_sfNum, m_currSymStart);
  SpectrumValue newSinr = sinr;
	m_ulSinrTrace (0, newSinr, newSinr);
  m_phySapUser->UlCqiReport (ulcqi);
}


void
newradioEnbPhy::PhyCtrlMessagesReceived (std::list<Ptr<newradioControlMessage> > msgList)
{
	std::list<Ptr<newradioControlMessage> >::iterator ctrlIt = msgList.begin ();

	while (ctrlIt != msgList.end ())
	{
		Ptr<newradioControlMessage> msg = (*ctrlIt);

		if (msg->GetMessageType () == newradioControlMessage::DL_CQI)
		{
			NS_LOG_INFO ("ENB " << m_cellId << " received CQI");
			m_phySapUser->ReceiveControlMessage (msg);
		}
		else if (msg->GetMessageType () == newradioControlMessage::BSR)
		{
			NS_LOG_INFO ("ENB " << m_cellId << " received BSR");
			m_phySapUser->ReceiveControlMessage (msg);
		}
		else if (msg->GetMessageType() == newradioControlMessage::RACH_PREAMBLE)
	  {
			NS_LOG_INFO ("ENB " << m_cellId << " received RACH_PREAMBLE");
			NS_ASSERT (m_cellId > 0);
			Ptr<newradioRachPreambleMessage> rachPreamble = DynamicCast<newradioRachPreambleMessage> (msg);
			m_phySapUser->ReceiveRachPreamble (rachPreamble->GetRapId ());
		}
		else if (msg->GetMessageType() == newradioControlMessage::DL_HARQ)
		{
			Ptr<newradioDlHarqFeedbackMessage> dlharqMsg = DynamicCast<newradioDlHarqFeedbackMessage> (msg);
			DlHarqInfo dlharq = dlharqMsg->GetDlHarqFeedback ();
			// check whether the UE is connected
			if (m_ueAttachedRnti.find (dlharq.m_rnti) != m_ueAttachedRnti.end ())
			{
				m_phySapUser->ReceiveControlMessage (msg);
			}
		}

		ctrlIt++;
	}

}

uint32_t
newradioEnbPhy::GetAbsoluteSubframeNo ()
{
	return ((m_frameNum - 1)*(m_phyMacConfig->GetSubframesPerFrame()*m_phyMacConfig->GetSlotsPerSubframe()) + m_slotNum);
}

////////////////////////////////////////////////////////////
/////////                     sap                 /////////
///////////////////////////////////////////////////////////

void
newradioEnbPhy::DoSetBandwidth (uint8_t ulBandwidth, uint8_t dlBandwidth)
{
  NS_LOG_FUNCTION (this << (uint32_t) ulBandwidth << (uint32_t) dlBandwidth);
}

void
newradioEnbPhy::DoSetEarfcn (uint16_t ulEarfcn, uint16_t dlEarfcn)
{
  NS_LOG_FUNCTION (this << ulEarfcn << dlEarfcn);
}


void
newradioEnbPhy::DoAddUe (uint16_t rnti)
{
	NS_LOG_FUNCTION (this << rnti);
	bool success = AddUePhy (rnti);
	NS_ASSERT_MSG (success, "AddUePhy() failed");

}

bool
newradioEnbPhy::AddUePhy (uint16_t rnti)
{
  NS_LOG_FUNCTION (this << rnti);
  std::set <uint16_t>::iterator it;
  it = m_ueAttachedRnti.find (rnti);
  if (it == m_ueAttachedRnti.end ())
    {
	  m_ueAttachedRnti.insert (rnti);
      return (true);
    }
  else
    {
      NS_LOG_ERROR ("UE already attached");
      return (false);
    }
}

void
newradioEnbPhy::DoRemoveUe (uint16_t rnti)
{
	std::set <uint16_t>::iterator it = m_ueAttachedRnti.find(rnti);
	if (it != m_ueAttachedRnti.end ())
	{
		m_ueAttachedRnti.erase(it);
	}
	else
	{
		NS_FATAL_ERROR("Impossible to remove UE, not attached!");
	}
  NS_LOG_FUNCTION (this << rnti);
}

void
newradioEnbPhy::DoSetPa (uint16_t rnti, double pa)
{
  NS_LOG_FUNCTION (this << rnti);
}

void
newradioEnbPhy::DoSetTransmissionMode (uint16_t  rnti, uint8_t txMode)
{
  NS_LOG_FUNCTION (this << rnti << (uint16_t)txMode);
  // UL supports only SISO MODE
}

void
newradioEnbPhy::DoSetSrsConfigurationIndex (uint16_t  rnti, uint16_t srcCi)
{
  NS_LOG_FUNCTION (this);
}


void
newradioEnbPhy::DoSetMasterInformationBlock (LteRrcSap::MasterInformationBlock mib)
{
  NS_LOG_FUNCTION (this);
  //m_mib = mib;
}


void
newradioEnbPhy::DoSetSystemInformationBlockType1 (LteRrcSap::SystemInformationBlockType1 sib1)
{
  NS_LOG_FUNCTION (this);
  m_sib1 = sib1;
}

int8_t
newradioEnbPhy::DoGetReferenceSignalPower () const
{
  NS_LOG_FUNCTION (this);
  return m_txPower;
}

void
newradioEnbPhy::SetPhySapUser (newradioEnbPhySapUser* ptr)
{
	m_phySapUser = ptr;
}

void
newradioEnbPhy::SetHarqPhyModule (Ptr<newradioHarqPhy> harq)
{
  m_harqPhyModule = harq;
}

void
newradioEnbPhy::ReceiveUlHarqFeedback (UlHarqInfo mes)
{
  NS_LOG_FUNCTION (this);
  // forward to scheduler
  //
  if(m_ueAttachedRnti.find(mes.m_rnti) != m_ueAttachedRnti.end())
  {
  	m_phySapUser->UlHarqFeedback (mes);
  }
}

}
